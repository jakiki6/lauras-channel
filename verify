#!/usr/bin/env -S bash -c "guix repl \$0 2> /tmp/verify.log"
!#

(add-to-load-path (dirname (current-filename)))

(use-modules (laura packages gradle)
             (laura packages gpu)
             (laura packages package-managers)
             (laura packages wayland)
             (laura packages android)
             (laura packages games)
             (laura packages bump)
             (laura packages go-common)
             (laura packages dee)
             (laura packages nomadnet)
             (laura packages rust-common)
             (laura packages utils)
             (laura packages 3ds)
             (laura packages ai)
             (laura packages binary))

(define to-test
  (list android-translation-layer
        axmldec
        simg2img
        squirrel-3.2
        shepherd-core
        fwupd-nonfree-polkit
        openssl-3.4.1
        drand-rs
        minecraft-launcher
        ScuffedMinecraft
        fceux
        rpcs3
        tpt
        uesave
        amdgpu-top
        nomadnet
        pacman
        ipatool
        Amogus-File-Encoder
        gcc-cross-riscv64-linux-gnu-toolchain
        CasioEmu
        activate-linux
        bkcrack
        bsdiff
        cado-nfs
        cerca
        clipmon
        coremark
        csvlens
        duf
        encpipe
        ent
        flatpak-builder
        leopard
        libgfshare
        liboqs
        paper-age
        payload-dumper-go
        pesign
        ricochet-refresh
        sbctl
        vbmeta-disable-verification
        wasmtime
        waydroid
        wshowkeys
        yara
        imhex
        lite
        binsider
        mbw
        binwalk-3
        wl-screenrec
        xwaylandvideobridge
        cshatag
        dsvpn
        sslscan
        ssh-audit
        simdutf
        bzip3
        faest-ref
        cpu-rec-rs
        echfs-fuse
        echfs-utils
        otptool
        ctrtool
        makerom
        ollama
        radicle-heartwood))

(use-modules (guix)
             (guix derivations)
             (guix monads)
             (guix packages))

(define (build pkg)
  (run-with-store (open-connection)
                  (package->derivation pkg)))

(define len
  (length to-test))
(define executed
  0)
(define succeeded
  0)
(define failures
  (list))

(map (lambda (pkg)
       (with-exception-handler (lambda (exn)
                                 (begin
                                   (set! failures
                                         (append (list (package-name pkg))
                                                 failures))
                                   (format #t "\x1b[31mfailure\x1b[0m: ~a\n"
                                           (if (store-protocol-error? exn)
                                               (store-protocol-error-message
                                                exn) exn)) #f))
                               (lambda _
                                 (begin
                                   (set! executed
                                         (+ executed 1))
                                   (format #t "~a [~a/~a] ... "
                                           (package-name pkg) executed len))
                                 (flush-all-ports)
                                 (build pkg)
                                 (format #t "\x1b[32msuccess\x1b[0m\n")
                                 (flush-all-ports)
                                 (set! succeeded
                                       (+ succeeded 1)))
                               #:unwind? #t)) to-test)

(let ((color (if (= executed succeeded) "32" "31")))
  (format #t "summary: \x1b[~am~a/~a\x1b[0m\n" color succeeded len))

(if (not (= executed succeeded))
    (begin
      (format #t "failed packages:")
      (map (lambda (pkg)
             (format #t " ~a" pkg)) failures)
      (format #t "\n")))
